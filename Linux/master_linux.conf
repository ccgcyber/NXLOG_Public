###############################################################################
# Created by Evan Davison - 27 June, 2014                                     #
# Requires NXLOG version 2.8.1248 or greater                                  #
###############################################################################

########################################
# Global directives                    #
########################################
User nxlog
Group nxlog

LogFile /var/log/nxlog/nxlog.log
LogLevel INFO

#define CERTDIR /var/lib/nxlog/cert
define CONFDIR /var/lib/nxlog
define LOGDIR /var/log/nxlog
define LOGFILE "%LOGDIR%/nxlog.log"

# default values:
# PidFile /var/run/nxlog/nxlog.pid
# CacheDir /var/spool/nxlog
# ModuleDir /lib/nxlog/modules

########################################
# Application Configuration Includes   #
########################################

# include /etc/nxlog/bro_conn.conf
# include /etc/nxlog/bro_dns.conf
# include /etc/nxlog/bro_files.conf
# include /etc/nxlog/bro_http.conf
# include /etc/nxlog/bro_notice.conf
# include /etc/nxlog/bro_smtp.conf
# include /etc/nxlog/bro_software.conf
# include /etc/nxlog/bro_ssh.conf
# include /etc/nxlog/bro_ssl.conf
# include /etc/nxlog/bro_weird.conf
# include /etc/nxlog/linux_audit.conf

########################################
# Global Extensions                    #
########################################

<Extension charconv>
    Module	xm_charconv
    AutodetectCharsets	utf-8, utf-16, utf-32
</Extension>

<Extension _syslog>
    Module	xm_syslog
    IETFTimestampInGMT	TRUE
</Extension>

<Extension _json>
    Module	xm_json
</Extension>

<Extension _exec>
    Module	xm_exec
</Extension>

########################################
# Processors                           #
########################################

<Processor buffer1>
    #Primary on-disk buffer for non-tcp sources
    Module	pm_buffer
    #Create 1GB temporary buffer
    MaxSize	1073741824
    #Warn at .5GB used
    WarnLimit	536870912
    Type	disk
    #Alternate route if primary failure if secondary configured
#     Exec	if buffer_count() > 2 reroute("secondary") \
# 	{\
# 	  log_warning("NXLOG internal log messages in past 1 hour"); \
# 	}
</Processor>

########################################
# NXLOG Internal Logging               #
########################################

<Input internal>
    Module	im_internal
    Exec	$class = "nxlog";\
			$meta_class = "nxlog";\
			rename_field("EventTime", "eventtime");\
			rename_field("Hostname", "hostname");\
			rename_field("EventType", "priority");\
			rename_field("Severity", "severity");\
			rename_field("SeverityValue", "severityvalue");\
			rename_field("ProcessID", "processid");\
			rename_field("Message", "msg");\
			rename_field("SourceName", "program");\
			rename_field("EventReceivedTime", "detectedtime");\
			rename_field("SourceModuleName", "source");\
			rename_field("SourceModuleType", "filetype");\
			to_json(); to_syslog_bsd();
    <Schedule>
  #Hourly NXLOG rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("nxhourly") \
  {\
    log_warning(get_stat("nxhourly") + " NXLOG internal log messages in past 1 hour"); \
  }
     </Schedule>
</Input>

########################################
# NXLOG Log Rotation                   #
########################################

# <Extension _fileop>
#     Module	xm_fileop
#
#     # Check the size of NXLOG log file every hour and rotate if it is larger than 5Mb
#     <Schedule>
# 	Every   1 hour
#     Exec    if (file_exists(%LOGFILE%) and (file_size(%LOGFILE%) >= 5M)) file_cycle(%LOGFILE%, 8$);
#     </Schedule>
#
#     # Rotate NXLOG log file every week on sunday at midnight
#     <Schedule>
# 	When    @weekly
#     Exec    if file_exists(%LOGFILE%) file_cycle(%LOGFILE%, 8);
#     </Schedule>
# </Extension>

########################################
# INPUT Linux Kernel Log               #
########################################

<Input kernel>
    Module	im_kernel
    Exec	$class = "unix";\
			$meta_class = "nxlog";\
	 		rename_field("EventTime", "eventtime");\
			rename_field("Hostname", "hostname");\
			rename_field("EventType", "priority");\
			rename_field("Severity", "severity");\
			rename_field("SeverityValue", "severityvalue");\
			rename_field("ProcessID", "processid");\
			rename_field("Message", "msg");\
			rename_field("SourceName", "program");\
			rename_field("EventReceivedTime", "detectedtime");\
			rename_field("SourceModuleName", "source");\
			rename_field("SourceModuleType", "filetype");\
			to_json(); to_syslog_bsd();
    <Schedule>
  #Hourly KERNEL rate monitoring
  Every	3600 sec
  Exec	if defined get_stat("kernel_hourly") \
  {\
    log_warning(get_stat("kernel_hourly") + " messages received from input KERNEL in past 1 hour"); \
  }
    </Schedule>
    <Schedule>
  #30 Minute KERNEL rate monitoring for dropped source
  Every	1800 sec
  Exec	if defined get_stat("kernel_rate") and get_stat("kernel_rate") <= 1 \
  {\
    log_warning("No messages received from input KERNEL for 30 minutes!"); \
  }
    </Schedule>
</Input>

########################################
# INPUT SSL Port 1514 (Syslog-TLS)     #
########################################

<Input ssl_in>
    Module  im_ssl
    Host  0.0.0.0
    Port  1514
    CertFile  /opt/tap-cbs/ssl/nxlog.crt
    CertKeyFile /opt/tap-cbs/ssl/nxlog.key
    RequireCert	FALSE
    AllowUntrusted TRUE
    FlowControl	TRUE
    Exec	convert_fields("AUTO", "utf-8");
    Exec	create_stat("sslhourly", "RATE", 3600); add_stat("sslhourly", 1);
    Exec	create_stat("sslrate", "RATE", 1800); add_stat("sslrate", 1);
    <Schedule>
  #Hourly SSL rate monitoring
  Every	3600 sec
  Exec	if defined get_stat("sslhourly") \
  {\
    log_warning(get_stat("sslhourly") + " messages received from input SSL:1516 in past 1 hour"); \
  }
    </Schedule>
    <Schedule>
  #30 Minute SSL rate monitoring for dropped source
  Every	1800 sec
  Exec	if defined get_stat("sslrate") and get_stat("sslrate") <= 1 \
  {\
    log_warning("No messages received from input SSL:1514 for 30 minutes!"); \
  }
    </Schedule>
</Input>

########################################
# INPUT TCP Port 514 (Syslog)          #
########################################

<Input tcp_in>
    Module	im_tcp
    Host	0.0.0.0
    Port	514
    FlowControl	TRUE
    Exec	create_stat("tcphourly", "RATE", 3600); add_stat("tcphourly", 1);
    Exec	create_stat("tcprate", "RATE", 1800); add_stat("tcprate", 1);
    <Schedule>
  #Hourly TCP rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("tcphourly") \
  {\
    log_warning(get_stat("tcphourly") + " messages received from input TCP:514 in past 1 hour"); \
  }
     </Schedule>
     <Schedule>
  #30 Minute TCP rate monitoring for dropped source
  Every		1800 sec
  Exec		if defined get_stat("tcprate") and get_stat("tcprate") <= 1 \
  {\
    log_warning("No messages received from input TCP:514 for 30 minutes!"); \
  }
     </Schedule>
</Input>

########################################
# INPUT UDP Port 514 (Syslog)          #
########################################

<Input udp_in>
    Module	im_udp
    Host	0.0.0.0
    Port	514
    Exec	create_stat("udphourly", "RATE", 3600); add_stat("udphourly", 1);
    Exec	create_stat("udprate", "RATE", 1800); add_stat("udprate", 1);
    <Schedule>
  #Hourly UDP rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("udphourly") \
  {\
    log_warning(get_stat("udphourly") + " messages received from input UDP:514 in past 1 hour"); \
  }
     </Schedule>
     <Schedule>
  #30 Minute UDP rate monitoring for dropped source
  Every		1800 sec
  Exec		if defined get_stat("udprate") and get_stat("udprate") <= 1 \
  {\
    log_warning("No messages received from input UDP:514 for 30 minutes!"); \
  }
     </Schedule>
</Input>

##############################################
# OUTPUT TAP Senders                         #
# (uncomment second sender stanza if needed) #
##############################################

<Output sender1>
    Module	om_tcp
    Host	127.0.0.1
    Port	1514
    Exec	create_stat("1outhourly", "RATE", 3600); add_stat("1outhourly", 1);
    <Schedule>
  #Hourly TCP rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("1outhourly") \
  {\
    log_warning(get_stat("1outhourly") + " messages forwarded to Sender#1 in past 1 hour"); \
  }
    </Schedule>
</Output>

# <Output sender2>
#     Module	om_tcp
#     Host	x.x.x.x
#     Port	1514
#     Exec	create_stat("2outhourly", "RATE", 3600); add_stat("2outhourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("2outhourly") \
#   {\
#     log_warning(get_stat("2outhourly") + " messages forwarded to Sender#2 in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

########################################
# Default Route                        #
########################################

<Route 1>
    #Primary route for log processing and forwarding
    Path	internal => buffer1 => sender1
</Route>
