###############################################################################
# Windows Default Configuration - Version 1.1                                 #
# Created by Evan Davison - 27 June, 2014 - UPDATED: 23 July, 2014            #
# Requires NXLOG version 2.8.1248 or greater                                  #
###############################################################################

########################################
# Global directives                    #
########################################

## Please set the ROOT to the folder your nxlog was installed into, otherwise it will not start.
#define ROOT C:\Program Files\nxlog
define ROOT C:\Program Files (x86)\nxlog

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

########################################
# Application Configuration Includes   #
########################################

#include %ROOT%\conf\ms_dhcpv4.conf
#include %ROOT%\conf\ms_dhcpv6.conf
#include %ROOT%\conf\ms_dns.conf
#include %ROOT%\conf\ms_exchange.conf
#include %ROOT%\conf\ms_netlogon.conf
#include %ROOT%\conf\ms_iisv6.conf
#include %ROOT%\conf\ms_iisv7.conf

########################################
# Global Extensions                    #
########################################

<Extension _charconv>
    Module	xm_charconv
    AutodetectCharsets iso8859-2, utf-8, utf-16, utf-32
</Extension>

<Extension _syslog>
    Module	xm_syslog
    IETFTimestampInGMT	TRUE
</Extension>

<Extension _json>
    Module	xm_json
</Extension>

<Extension _exec>
    Module	xm_exec
</Extension>

########################################
# NXLOG Internal Logging               #
########################################

<Input internal>
    Module	im_internal
    Exec	to_json();
    <Schedule>
  #Hourly NXLOG rate monitoring
  Every		3600 sec
  Exec		if defined get_stat("nxhourly") \
  {\
    log_warning(get_stat("nxhourly") + " NXLOG internal log messages in past 1 hour"); \
  }
     </Schedule>
</Input>

########################################
# NXLOG Internal Log Rotation          #
########################################

<Extension _fileop>
    Module	xm_fileop

    # Check the size of NXLOG log file every hour and rotate if it is larger than 5Mb
    <Schedule>
	Every   1 hour
        Exec    if (file_exists(%LOGFILE%) and (file_size(%LOGFILE%) >= 5M)) file_cycle(%LOGFILE%, 8$);
    </Schedule>

    # Rotate NXLOG log file every week on sunday at midnight
    <Schedule>
	When    @weekly
        Exec    if file_exists(%LOGFILE%) file_cycle(%LOGFILE%, 8);
    </Schedule>
</Extension>

########################################
# NXLOG NULL Logging (For Routing)     #
########################################

# <Input in_null>
#     Module	im_null
# </Input>

########################################
# INPUT Microsft Event Logs            #
# (for Windows Vista/Win7/2008/2012)   #
########################################

<Input eventlog>
    Module	im_msvistalog
    Query	<QueryList>\
    		  <Query Id="0">\
				<Select Path="Application">*</Select>\
				<Select Path="Security">*</Select>\
				<Select Path="System">*</Select>\
				<Select Path="Microsoft-Windows-AppLocker/EXE and DLL">*</Select>\
				<Select Path="Microsoft-Windows-TaskScheduler/Operational">*</Select>\
				<Select Path="Windows PowerShell">*</Select>\
				<Select Path="Microsoft-Windows-WinRM/Operational">*</Select>\
				<Select Path="Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational">*</Select>\
				<Select Path="Microsoft-Windows-RemoteDesktopServices-RdpCoreTS/Operational">*</Select>\
				<Select Path="Microsoft-Windows-TerminalServices-LocalSessionManager/Operational">*</Select>\
		  	  </Query>
			</QueryList>
    Exec	to_json();
    <Schedule>
  #Hourly MS_EVENTLOG rate monitoring
  Every	3600 sec
  Exec	if defined get_stat("eventlog_hourly") \
  {\
    log_warning(get_stat("eventlog_hourly") + " messages received from input MS_EVENTLOG in past 1 hour"); \
  }
	</Schedule>
	<Schedule>
  #30 Minute MS_EVENTLOG rate monitoring for dropped source
  Every	1800 sec
  Exec	if defined get_stat("eventlog_rate") and get_stat("eventlog_rate") <= 1 \
  {\
  	log_warning("No messages received from input MS_EVENTLOG for 30 minutes!"); \
  }
	</Schedule>
</Input>

########################################
# INPUT Microsft Event Logs            #
# (for Windows XP/2000/2003 & earlier) #
########################################

# <Input win_old_eventlog>
#     Module	im_mseventlog
#     UTF8		TRUE
#     Exec		to_json();
#     <Schedule>
#   #Hourly MS_EVENTLOG rate monitoring
#   Every	3600 sec
#   Exec	if defined get_stat("eventlog_hourly") \
#   {\
#     log_warning(get_stat("eventlog_hourly") + " messages received from input MS_EVENTLOG in past 1 hour"); \
#   }
# 	</Schedule>
# 	<Schedule>
#   #30 Minute MS_EVENTLOG rate monitoring for dropped source
#   Every	1800 sec
#   Exec	if defined get_stat("eventlog_rate") and get_stat("eventlog_rate") <= 1 \
#   {\
#   	log_warning("No messages received from input MS_EVENTLOG for 30 minutes!"); \
#   }
# 	</Schedule>
# </Input>

##############################################
# OUTPUT (UNENCRYPTED)                       #
# (uncomment second sender stanza if needed) #
##############################################

# <Output tcpout1>
#     Module	om_tcp
#     Host		x.x.x.x
#     Port		514
#     Exec		create_stat("1tcpouthourly", "RATE", 3600); add_stat("1tcpouthourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("1tcpouthourly") \
#   {\
#     log_warning(get_stat("1tcpouthourly") + " messages forwarded to tcpout#1-TCP in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

# <Output tcpout2>
#     Module	om_tcp
#     Host		x.x.x.x
#     Port		514
#     Exec	create_stat("2tcpouthourly", "RATE", 3600); add_stat("2tcpouthourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("2tcpouthourly") \
#   {\
#     log_warning(get_stat("2tcpouthourly") + " messages forwarded to tcpout#2-TCP in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

##############################################
# OUTPUT (ENCRYPTED)                         #
# (uncomment second sender stanza if needed) #
##############################################

# <Output sslout1>
#     Module	om_ssl
#     Host	127.0.0.1
#     Port	1514
#     Exec	create_stat("1outhourly", "RATE", 3600); add_stat("1outhourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("1outhourly") \
#   {\
#     log_warning(get_stat("1outhourly") + " messages forwarded to sslout#1 in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

# <Output sslout2>
#     Module	om_ssl
#     Host		x.x.x.x
#     Port		1514
#     AllowUntrusted TRUE
#     Exec	create_stat("2sslouthourly", "RATE", 3600); add_stat("2sslouthourly", 1);
#     <Schedule>
#   #Hourly TCP rate monitoring
#   Every		3600 sec
#   Exec		if defined get_stat("2sslouthourly") \
#   {\
#     log_warning(get_stat("2sslouthourly") + " messages forwarded to Sender#2-SSL in past 1 hour"); \
#   }
#     </Schedule>
# </Output>

########################################
# Routing                              #
########################################

<Route primary>
	#Primary route for log processing and forwarding
    Path	internal => sender1
</Route>

# <Route secondary>
#     #Secondary route in event of primary failure
#     Path	im_null => sender2
# </Route>
